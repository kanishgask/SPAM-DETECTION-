import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Optional: Configure visualization style
sns.set(style='whitegrid', palette='muted', font_scale=1.2)

# 1. Load Dataset
# Replace 'emails.csv' with your dataset file path
df = pd.read_csv(r'C:/Users/user/Downloads/archive/emails.csv')

# 2. Basic Info
print("Dataset shape:", df.shape)
print("\nColumns and data types:\n", df.dtypes)
print("\nFirst 5 rows:\n", df.head())

# 3. Missing values
print("\nMissing values per column:")
print(df.isnull().sum())

# Visualize missing data heatmap
plt.figure(figsize=(10, 5))
sns.heatmap(df.isnull(), cbar=False, yticklabels=False, cmap='viridis')
plt.title("Missing Values Heatmap")
plt.show()

# 4. Statistical summary of numeric features
print("\nSummary statistics:")
print(df.describe())

# 5. Categorical feature distribution
cat_cols = df.select_dtypes(include=['object']).columns.tolist()
print(f"\nCategorical columns: {cat_cols}")

for col in cat_cols:
    print(f"\nValue counts for {col}:")
    print(df[col].value_counts().head(10))

# Plot counts for a categorical column (e.g., 'spam' or 'label')
if 'spam' in df.columns:
    plt.figure(figsize=(6,4))
    sns.countplot(x='spam', data=df)
    plt.title('Spam vs Not Spam Count')
    plt.show()

# 6. Numerical features distributions
num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
print(f"\nNumerical columns: {num_cols}")

df[num_cols].hist(bins=30, figsize=(15, 10), layout=(len(num_cols)//3 + 1, 3))
plt.suptitle("Histograms of Numeric Features", fontsize=16)
plt.show()

# 7. Correlation matrix and heatmap
corr = df[num_cols].corr()
plt.figure(figsize=(12, 8))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap of Numeric Features")
plt.show()

# 8. Outlier detection: boxplots for numeric features
plt.figure(figsize=(15, 8))
for i, col in enumerate(num_cols):
    plt.subplot(2, (len(num_cols)+1)//2, i+1)
    sns.boxplot(y=df[col])
    plt.title(f'Boxplot of {col}')
plt.tight_layout()
plt.show()

# 9. Text feature analysis: example on 'email_text' or 'subject' column
text_col = None
for col in ['email_text', 'text', 'subject', 'body']:
    if col in df.columns:
        text_col = col
        break

if text_col:
    print(f"\nText feature found: '{text_col}'")
    # Length of emails
    df['text_length'] = df[text_col].apply(lambda x: len(str(x)))
    plt.figure(figsize=(8,4))
    sns.histplot(df['text_length'], bins=50, kde=True)
    plt.title("Distribution of Email Text Length")
    plt.show()

    # Average word count
    df['word_count'] = df[text_col].apply(lambda x: len(str(x).split()))
    plt.figure(figsize=(8,4))
    sns.histplot(df['word_count'], bins=50, kde=True, color='orange')
    plt.title("Distribution of Word Count in Email Text")
    plt.show()

    # Top 10 most common words (simple)
    from collections import Counter
    all_words = ' '.join(df[text_col].dropna().astype(str)).lower().split()
    common_words = Counter(all_words).most_common(10)
    print("\nTop 10 most common words in email text:")
    for word, count in common_words:
        print(f"{word}: {count}")

# 10. Relationship between features and target (e.g., 'spam')
target = None
for col in ['spam', 'label', 'target']:
    if col in df.columns:
        target = col
        break

if target:
    print(f"\nAnalyzing relationship with target: '{target}'")
    for col in num_cols:
        plt.figure(figsize=(6,4))
        sns.boxplot(x=target, y=col, data=df)
        plt.title(f'{col} distribution by {target}')
        plt.show()

# Additional EDA steps you might want to add:
# - Time based analysis if datetime columns available
# - Feature engineering from text (TF-IDF, word counts, sentiment)
# - Pairplots for numerical features
# - GroupBy aggregations

print("\nEDA completed!")
